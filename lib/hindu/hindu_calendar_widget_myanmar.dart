/// Hindu Calendar Widget with Myanmar Language Support
///
/// A comprehensive Hindu calendar widget that displays traditional
/// Hindu/Panchanga calendar information with Myanmar language translations.
library;

import 'package:flutter/material.dart';

import '../hindu/hcalendar/calculation_engine.dart';
import '../hindu/hcalendar/pancanga_date.dart';

/// A widget that displays Hindu calendar information in Myanmar language
class HinduCalendarWidgetMyanmar extends StatefulWidget {
  /// Gregorian year
  final int year;

  /// Gregorian month (1-12)
  final int month;

  /// Gregorian day
  final int day;

  /// Whether to show compact view
  final bool compact;

  /// Font size for the text
  final double fontSize;

  /// Latitude for location-based calculations
  final double latitude;

  /// Longitude for location-based calculations
  final double longitude;

  /// Whether to show converter interface
  final bool showConverter;

  /// Day names in Myanmar
  static const List<String> dayNames = [
    '·Äê·Äî·ÄÑ·Ä∫·Äπ·ÄÇ·Äî·ÄΩ·Ä±', // Sunday
    '·Äê·Äî·ÄÑ·Ä∫·Äπ·Äú·Ä¨', // Monday
    '·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·Ä´', // Tuesday
    '·Äó·ÄØ·Äí·Äπ·Äì·Äü·Ä∞·Ä∏', // Wednesday
    '·ÄÄ·Äº·Ä¨·Äû·Äï·Äê·Ä±·Ä∏', // Thursday
    '·Äû·Ä±·Ä¨·ÄÄ·Äº·Ä¨', // Friday
    '·ÄÖ·Äî·Ä±', // Saturday
  ];

  const HinduCalendarWidgetMyanmar({
    super.key,
    required this.year,
    required this.month,
    required this.day,
    this.compact = false,
    this.fontSize = 16.0,
    this.latitude = 0.0,
    this.longitude = 0.0,
    this.showConverter = false,
  });

  @override
  State<HinduCalendarWidgetMyanmar> createState() => _HinduCalendarWidgetMyanmarState();
}

class _HinduCalendarWidgetMyanmarState extends State<HinduCalendarWidgetMyanmar> {
  late PancangaDate pancangaDate;

  // Converter state
  int _selectedYear = DateTime.now().year;
  int _selectedMonth = 1;
  int _selectedDay = 1;
  bool _isShukla = true;

  @override
  void initState() {
    super.initState();
    _calculateDate();
  }

  @override
  void didUpdateWidget(HinduCalendarWidgetMyanmar oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.year != widget.year ||
        oldWidget.month != widget.month ||
        oldWidget.day != widget.day) {
      _calculateDate();
    }
  }

  void _calculateDate() {
    final calculation = HinduCalculationEngine.calculateHinduDate(
      widget.year,
      widget.month,
      widget.day,
      latitude: widget.latitude,
      longitude: widget.longitude,
    );

    setState(() {
      pancangaDate = PancangaDate.fromCalculation(calculation);
    });
  }

  @override
  Widget build(BuildContext context) {
    if (widget.showConverter) {
      return _buildConverterView();
    }

    return widget.compact ? _buildCompactView() : _buildFullView();
  }

  Widget _buildCompactView() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.deepPurple.shade50, Colors.purple.shade50, Colors.indigo.shade50],
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.deepPurple.withOpacity(0.15),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            // Compact header with main Myanmar info
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.deepPurple.shade600, Colors.purple.shade500],
                    ),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.auto_awesome, color: Colors.white, size: widget.fontSize - 2),
                      const SizedBox(width: 4),
                      Text(
                        '·Äü·Ä≠·Äî·Äπ·Äí·Ä∞',
                        style: TextStyle(
                          fontSize: widget.fontSize - 2,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '${_getMyanmarTithiName(pancangaDate.tithiName)} ‚Ä¢ ${_getMyanmarPaksha(pancangaDate.paksha)}',
                    style: TextStyle(
                      fontSize: widget.fontSize,
                      fontWeight: FontWeight.bold,
                      color: Colors.deepPurple.shade700,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 6),

            // Essential Panchanga in Myanmar - single scrollable row
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  _buildMyanmarInfoChip(
                    '‚≠ê ${_getMyanmarNakshatra(pancangaDate.nakshatraName)}',
                    Colors.purple,
                  ),
                  const SizedBox(width: 4),
                  _buildMyanmarInfoChip(
                    'üßò ${_getMyanmarYoga(pancangaDate.yogaName)}',
                    Colors.blue,
                  ),
                  const SizedBox(width: 4),
                  _buildMyanmarInfoChip(
                    'üìÖ ${_getMyanmarVara(pancangaDate.varaName)}',
                    Colors.green,
                  ),
                  const SizedBox(width: 4),
                  _buildMyanmarInfoChip(
                    'üåô ${_getMyanmarMonth(pancangaDate.lunarMonth)}',
                    Colors.indigo,
                  ),
                  const SizedBox(width: 4),
                  _buildMyanmarInfoChip(
                    _convertToMyanmarNumerals(pancangaDate.hinduYear),
                    Colors.orange,
                  ),
                ],
              ),
            ),

            // Samvatsara - very compact
            const SizedBox(height: 4),
            Text(
              '·Äû·Ä∂·Äù·ÄÖ·Äπ·ÄÖ·Äõ: ${_getMyanmarSamvatsara(pancangaDate.hinduYear)}',
              style: TextStyle(
                fontSize: widget.fontSize - 3,
                fontWeight: FontWeight.w500,
                color: Colors.deepPurple.shade600,
              ),
              overflow: TextOverflow.ellipsis,
            ),

            // Muhurta info - Myanmar compact
            if (pancangaDate.muhurtaName.isNotEmpty) ...[
              const SizedBox(height: 4),
              Row(
                children: [
                  Icon(
                    pancangaDate.muhurtaIsDay ? Icons.wb_sunny : Icons.nights_stay,
                    size: widget.fontSize - 2,
                    color: Colors.amber.shade700,
                  ),
                  const SizedBox(width: 4),
                  Expanded(
                    child: Text(
                      '·Äô·ÄØ·Äü·ÄØ·Äê·Ä∫·Äê: ${_getMyanmarMuhurta(pancangaDate.muhurtaName, pancangaDate.muhurtaIsDay)}',
                      style: TextStyle(
                        fontSize: widget.fontSize - 3,
                        fontWeight: FontWeight.w500,
                        color: Colors.amber.shade800,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildMyanmarInfoChip(String text, MaterialColor color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        gradient: LinearGradient(colors: [color.shade50, color.shade100]),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.shade200, width: 0.5),
        boxShadow: [
          BoxShadow(color: color.withOpacity(0.1), blurRadius: 1, offset: const Offset(0, 1)),
        ],
      ),
      child: Text(
        text,
        style: TextStyle(
          fontSize: widget.fontSize - 4,
          fontWeight: FontWeight.w600,
          color: color.shade700,
        ),
      ),
    );
  }

  Widget _buildFullView() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.deepPurple.shade50,
            Colors.purple.shade50,
            Colors.indigo.shade50,
            Colors.blue.shade50,
          ],
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.deepPurple.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(),
            const SizedBox(height: 20),
            _buildDateDisplay(),
            const SizedBox(height: 20),
            _buildPancangaDetails(),
            const SizedBox(height: 20),
            _buildAdditionalInfo(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple.shade600, Colors.purple.shade500, Colors.indigo.shade500],
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.deepPurple.withOpacity(0.4),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(Icons.auto_awesome, color: Colors.white, size: widget.fontSize + 2),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '·Äü·Ä≠·Äî·Äπ·Äí·Ä∞ ·Äï·Äº·ÄÄ·Äπ·ÄÅ·Äí·Ä≠·Äî·Ä∫ (·Äï·Äâ·Äπ·ÄÖ·Ä¨·ÄÑ·Ä∫·Äπ·ÄÇ)', // Hindu Calendar (Panchanga)
                  style: TextStyle(
                    fontSize: widget.fontSize + 4,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                Text(
                  '·Äû·Äî·Ä∑·Ä∫·Äõ·Äæ·ÄÑ·Ä∫·Ä∏·Äû·Ä±·Ä¨ ·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äê·ÄΩ·ÄÄ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äæ·ÄØ', // Sacred Time Calculation
                  style: TextStyle(
                    fontSize: widget.fontSize - 2,
                    color: Colors.white.withOpacity(0.9),
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Column(
              children: [
                Icon(Icons.star_border, color: Colors.white, size: widget.fontSize),
                Text(
                  '·Äô·Äº·Äî·Ä∫·Äô·Ä¨',
                  style: TextStyle(
                    fontSize: widget.fontSize - 4,
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDateDisplay() {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [Colors.white, Colors.deepPurple.shade50],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.deepPurple.shade200, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.deepPurple.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            // Main Hindu Date with enhanced styling
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.deepPurple.shade100, Colors.purple.shade100],
                ),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.deepPurple.shade300),
              ),
              child: Column(
                children: [
                  Text(
                    _getMyanmarTithiName(pancangaDate.tithiName),
                    style: TextStyle(
                      fontSize: widget.fontSize + 6,
                      fontWeight: FontWeight.bold,
                      color: Colors.deepPurple.shade800,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _getMyanmarPaksha(pancangaDate.paksha),
                    style: TextStyle(
                      fontSize: widget.fontSize + 2,
                      fontWeight: FontWeight.w600,
                      color: Colors.deepPurple.shade700,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 12),

            // Month and Year info
            Row(
              children: [
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.indigo.shade50,
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(color: Colors.indigo.shade200),
                    ),
                    child: Column(
                      children: [
                        Icon(
                          Icons.calendar_month,
                          color: Colors.indigo.shade600,
                          size: widget.fontSize,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          _getMyanmarMonth(pancangaDate.lunarMonth),
                          style: TextStyle(
                            fontSize: widget.fontSize - 1,
                            fontWeight: FontWeight.w600,
                            color: Colors.indigo.shade700,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.orange.shade50,
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(color: Colors.orange.shade200),
                    ),
                    child: Column(
                      children: [
                        Icon(Icons.event, color: Colors.orange.shade600, size: widget.fontSize),
                        const SizedBox(height: 4),
                        Text(
                          _convertToMyanmarNumerals(pancangaDate.hinduYear),
                          style: TextStyle(
                            fontSize: widget.fontSize,
                            fontWeight: FontWeight.bold,
                            color: Colors.orange.shade700,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Samvatsara with special styling
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.purple.shade100, Colors.deepPurple.shade100],
                ),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.deepPurple.shade300),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.auto_awesome,
                    color: Colors.deepPurple.shade600,
                    size: widget.fontSize,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '·Äû·Ä∂·Äù·ÄÖ·Äπ·ÄÖ·Äõ: ${_getMyanmarSamvatsara(pancangaDate.hinduYear)}',
                      style: TextStyle(
                        fontSize: widget.fontSize,
                        fontWeight: FontWeight.w600,
                        color: Colors.deepPurple.shade700,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 12),

            // Gregorian Date with enhanced design
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [Colors.blue.shade100, Colors.lightBlue.shade100]),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(color: Colors.blue.shade300),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.today, color: Colors.blue.shade700, size: widget.fontSize),
                  const SizedBox(width: 8),
                  Text(
                    '·ÄÇ·Äõ·ÄÆ·ÄÇ·Ä±·Ä´·Äõ·ÄÆ·Äö·Äî·Ä∫: ${_convertToMyanmarNumerals(widget.day)}/${_convertToMyanmarNumerals(widget.month)}/${_convertToMyanmarNumerals(widget.year)}',
                    style: TextStyle(
                      fontSize: widget.fontSize,
                      fontWeight: FontWeight.w600,
                      color: Colors.blue.shade800,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),
            // Key Panchanga at a glance with enhanced design
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildQuickInfo(
                  '·Äî·ÄÄ·Äπ·ÄÅ·Äê·Ä∫',
                  _getMyanmarNakshatra(pancangaDate.nakshatraName),
                  Icons.star,
                  Colors.purple,
                ),
                _buildQuickInfo(
                  '·Äö·Ä±·Ä¨·ÄÇ',
                  _getMyanmarYoga(pancangaDate.yogaName),
                  Icons.self_improvement,
                  Colors.blue,
                ),
                _buildQuickInfo(
                  '·ÄÄ·Äõ·Äè',
                  _getMyanmarKarana(pancangaDate.karanaName),
                  Icons.timeline,
                  Colors.green,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickInfo(String label, String value, IconData icon, MaterialColor color) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        gradient: LinearGradient(colors: [color.shade50, color.shade100]),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.shade200),
        boxShadow: [
          BoxShadow(color: color.withOpacity(0.2), blurRadius: 4, offset: const Offset(0, 2)),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: color.shade600, size: widget.fontSize + 2),
          const SizedBox(height: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: widget.fontSize - 3,
              fontWeight: FontWeight.w600,
              color: color.shade700,
            ),
          ),
          const SizedBox(height: 2),
          Text(
            value,
            style: TextStyle(
              fontSize: widget.fontSize - 2,
              fontWeight: FontWeight.w500,
              color: color.shade800,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildPancangaDetails() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          '·Äï·Äâ·Äπ·ÄÖ·Ä¨·ÄÑ·Ä∫·Äπ·ÄÇ ·Ä°·Äû·Ä±·Ä∏·ÄÖ·Ä≠·Äê·Ä∫ (·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·Åè ·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·Ä´·Äô·Äª·Ä¨·Ä∏)', // Panchanga Details (Limbs of Time)
          style: TextStyle(fontSize: widget.fontSize + 2, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),

        // Core Panchanga Elements
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.deepPurple.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.deepPurple.shade200),
          ),
          child: Column(
            children: [
              _buildDetailRow(
                '·ÅÅ·Åã ·Äê·Ä≠·Äë·Ä≠',
                '${_getMyanmarTithiName(pancangaDate.tithiName)} (${_convertToMyanmarNumerals(pancangaDate.tithiNumber)}) - ${_getMyanmarPaksha(pancangaDate.paksha)}',
              ),
              _buildDetailRow(
                '·ÅÇ·Åã ·Äù·Ä´·Äõ',
                '${_getMyanmarVara(pancangaDate.varaName)} (${_convertToMyanmarNumerals(pancangaDate.varaNumber + 1)})',
              ),
              _buildDetailRow(
                '·ÅÉ·Åã ·Äî·ÄÄ·Äπ·ÄÅ·Äê·Ä∫',
                '${_getMyanmarNakshatra(pancangaDate.nakshatraName)} (${_convertToMyanmarNumerals(pancangaDate.nakshatraNumber)})',
              ),
              _buildDetailRow(
                '·ÅÑ·Åã ·Äö·Ä±·Ä¨·ÄÇ',
                '${_getMyanmarYoga(pancangaDate.yogaName)} (${_convertToMyanmarNumerals(pancangaDate.yogaNumber)})',
              ),
              _buildDetailRow(
                '·ÅÖ·Åã ·ÄÄ·Äõ·Äè',
                '${_getMyanmarKarana(pancangaDate.karanaName)} (${_convertToMyanmarNumerals(pancangaDate.karanaNumber)})',
              ),
              _buildDetailRow(
                '·ÅÜ·Åã ·Äô·ÄØ·Äü·ÄØ·Äê·Äπ·Äê',
                '${_getMyanmarMuhurta(pancangaDate.muhurtaName, pancangaDate.muhurtaIsDay)} (${_convertToMyanmarNumerals(pancangaDate.muhurtaIndex)}) - ${pancangaDate.muhurtaIsDay ? '·Äî·Ä±·Ä∑·ÄÅ·Äª·Ä≠·Äî·Ä∫' : '·Ää·ÄÅ·Äª·Ä≠·Äî·Ä∫'}',
              ),
            ],
          ),
        ),

        const SizedBox(height: 12),

        // Additional Calendar Information
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.orange.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.orange.shade200),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '·Äï·Äº·ÄÄ·Äπ·ÄÅ·Äí·Ä≠·Äî·Ä∫ ·Ä°·ÄÅ·Äª·ÄÄ·Ä∫·Ä°·Äú·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏',
                style: TextStyle(
                  fontSize: widget.fontSize + 1,
                  fontWeight: FontWeight.bold,
                  color: Colors.orange.shade800,
                ),
              ),
              const SizedBox(height: 8),
              _buildDetailRow('·Äî·Äæ·ÄÖ·Ä∫', _convertToMyanmarNumerals(pancangaDate.hinduYear)),
              _buildDetailRow('·Äú', _getMyanmarMonth(pancangaDate.lunarMonth)),
              _buildDetailRow('·Äõ·Äê·ÄØ', _getMyanmarSeason(pancangaDate.rituName)),
              _buildDetailRow('·Äô·Ä¨·Äû', _getMyanmarMonth(pancangaDate.masaName)),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: TextStyle(
                fontSize: widget.fontSize,
                fontWeight: FontWeight.w600,
                color: Colors.grey.shade700,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(fontSize: widget.fontSize, color: Colors.black87),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAdditionalInfo() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.blue.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.star, color: Colors.blue.shade800, size: widget.fontSize),
              const SizedBox(width: 6),
              Text(
                '·Äê·ÄΩ·ÄÄ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏',
                style: TextStyle(
                  fontSize: widget.fontSize + 1,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue.shade800,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '·Äõ·Äù·Ä≠',
                      style: TextStyle(fontSize: widget.fontSize - 2, fontWeight: FontWeight.w600),
                    ),
                    Text(
                      '${pancangaDate.sunLongitude.toStringAsFixed(2)}¬∞',
                      style: TextStyle(fontSize: widget.fontSize - 1),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '·ÄÖ·Äî·Äπ·Äí·Äõ',
                      style: TextStyle(fontSize: widget.fontSize - 2, fontWeight: FontWeight.w600),
                    ),
                    Text(
                      '${pancangaDate.moonLongitude.toStringAsFixed(2)}¬∞',
                      style: TextStyle(fontSize: widget.fontSize - 1),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '·ÄÇ·Äª·Ä∞·Äú·ÄÆ·Äö·Äî·Ä∫ ·Äî·Ä±·Ä∑:',
                      style: TextStyle(fontSize: widget.fontSize - 2, fontWeight: FontWeight.w600),
                    ),
                    Text(
                      pancangaDate.julianDay.toStringAsFixed(2),
                      style: TextStyle(fontSize: widget.fontSize - 1),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '·Äê·Ää·Ä∫·Äî·Ä±·Äõ·Ä¨:',
                      style: TextStyle(fontSize: widget.fontSize - 2, fontWeight: FontWeight.w600),
                    ),
                    Text(
                      '${widget.latitude.toStringAsFixed(2)}¬∞·Äô·Äº·Ä±·Ä¨·ÄÄ·Ä∫, ${widget.longitude.toStringAsFixed(2)}¬∞·Ä°·Äõ·Äæ·Ä±·Ä∑',
                      style: TextStyle(fontSize: widget.fontSize - 1),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            '·Äô·Äæ·Äê·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫: ·Ä§·Äê·ÄΩ·ÄÄ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏·Äû·Ää·Ä∫ ·Äï·ÄØ·Ä∂·Äô·Äæ·Äî·Ä∫ ·Äü·Ä≠·Äî·Äπ·Äí·Ä∞ ·Äï·Äº·ÄÄ·Äπ·ÄÅ·Äí·Ä≠·Äî·Ä∫ ·Äî·Ää·Ä∫·Ä∏·Äú·Äô·Ä∫·Ä∏·Äô·Äª·Ä¨·Ä∏·Äï·Ä±·Ä´·Ä∫ ·Ä°·ÄÅ·Äº·Ä±·ÄÅ·Ä∂·Äë·Ä¨·Ä∏·Äû·Ää·Ä∫·Åã ·Äê·Ä≠·ÄÄ·Äª·Äû·Ä±·Ä¨ ·Äò·Ä¨·Äû·Ä¨·Äõ·Ä±·Ä∏ ·ÄÄ·Äº·Ää·Ä∫·Ää·Ä≠·ÄØ·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äí·Ä±·Äû·ÄÅ·Ä∂ ·ÄÜ·Äõ·Ä¨·Äê·Ä±·Ä¨·Ä∫·Äô·Äª·Ä¨·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·Äê·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·ÄÑ·Ä∫·Äï·Ä´·Åã',
            style: TextStyle(
              fontSize: widget.fontSize - 3,
              fontStyle: FontStyle.italic,
              color: Colors.blue.shade600,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConverterView() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '·Äü·Ä≠·Äî·Äπ·Äí·Ä∞ ·Äï·Äº·ÄÄ·Äπ·ÄÅ·Äí·Ä≠·Äî·Ä∫',
              style: TextStyle(
                fontSize: widget.fontSize + 4,
                fontWeight: FontWeight.bold,
                color: Colors.deepPurple,
              ),
            ),
            const SizedBox(height: 16),

            // Current date display
            _buildDateDisplay(),

            const SizedBox(height: 16),

            // Converter inputs
            Text(
              '·Äü·Ä≠·Äî·Äπ·Äí·Ä∞ ·Äõ·ÄÄ·Ä∫·ÄÖ·ÄΩ·Ä≤·ÄÄ·Ä≠·ÄØ ·ÄÇ·Äõ·ÄÆ·ÄÇ·Ä±·Ä´·Äõ·ÄÆ·Äö·Äî·Ä∫·Äû·Ä≠·ÄØ·Ä∑ ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äõ·Äî·Ä∫',
              style: TextStyle(fontSize: widget.fontSize + 2, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),

            Row(
              children: [
                Expanded(
                  child: _buildDropdown(
                    '·Äî·Äæ·ÄÖ·Ä∫',
                    _selectedYear,
                    List.generate(50, (i) => pancangaDate.hinduYear - 25 + i),
                    (value) => setState(() => _selectedYear = value as int),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _buildDropdown(
                    '·Äú',
                    _selectedMonth.clamp(1, 12),
                    List.generate(12, (i) => i + 1),
                    (value) => setState(() => _selectedMonth = value!),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _buildDropdown(
                    '·Äõ·ÄÄ·Ä∫',
                    _selectedDay.clamp(1, 15),
                    List.generate(15, (i) => i + 1),
                    (value) => setState(() => _selectedDay = value!),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 12),

            Row(
              children: [
                Text('·Äï·ÄÄ·Äπ·ÄÅ: ', style: TextStyle(fontSize: widget.fontSize)),
                Radio<bool>(
                  value: true,
                  groupValue: _isShukla,
                  onChanged: (value) => setState(() => _isShukla = value!),
                ),
                const Text('·Äú·ÄÜ·Äî·Ä∫·Ä∏ ·Äï·ÄÄ·Äπ·ÄÅ'),
                Radio<bool>(
                  value: false,
                  groupValue: _isShukla,
                  onChanged: (value) => setState(() => _isShukla = value!),
                ),
                const Text('·Äú·ÄÜ·ÄØ·Äê·Ä∫ ·Äï·ÄÄ·Äπ·ÄÅ'),
              ],
            ),

            const SizedBox(height: 16),

            ElevatedButton(
              onPressed: _convertHinduToGregorian,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.deepPurple,
                foregroundColor: Colors.white,
              ),
              child: const Text('·ÄÇ·Äõ·ÄÆ·ÄÇ·Ä±·Ä´·Äõ·ÄÆ·Äö·Äî·Ä∫·Äû·Ä≠·ÄØ·Ä∑ ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Äî·Ä∫'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDropdown<T>(String label, T value, List<T> items, void Function(T?) onChanged) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: TextStyle(fontSize: widget.fontSize - 2, fontWeight: FontWeight.w600),
        ),
        const SizedBox(height: 4),
        DropdownButton<T>(
          value: value,
          isExpanded: true,
          items: items.map((T item) {
            return DropdownMenuItem<T>(
              value: item,
              child: Text(_convertToMyanmarNumerals(item as int)),
            );
          }).toList(),
          onChanged: onChanged,
        ),
      ],
    );
  }

  void _convertHinduToGregorian() {
    final gregorianDate = HinduCalculationEngine.hinduToGregorian(
      _selectedYear,
      _selectedMonth,
      _selectedDay,
      _isShukla,
    );

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äô·Äæ·ÄØ ·Äõ·Äú·Äí·Ä∫'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '·Äü·Ä≠·Äî·Äπ·Äí·Ä∞ ·Äõ·ÄÄ·Ä∫·ÄÖ·ÄΩ·Ä≤: ${_convertToMyanmarNumerals(_selectedDay)} ${_isShukla ? '·Äõ·Äæ·ÄØ·ÄÄ·Äú·Äï·ÄÄ·Äπ·ÄÅ' : '·ÄÄ·Åñ·Ä≠·Äõ·Äæ·Äπ·Äè·Äï·ÄÄ·Äπ·ÄÅ'} ·Äú ${_convertToMyanmarNumerals(_selectedMonth)} ·Äî·Äæ·ÄÖ·Ä∫ ${_convertToMyanmarNumerals(_selectedYear)}',
            ),
            const SizedBox(height: 8),
            Text(
              '·ÄÇ·Äõ·ÄÆ·ÄÇ·Ä±·Ä´·Äõ·ÄÆ·Äö·Äî·Ä∫ ·Äõ·ÄÄ·Ä∫·ÄÖ·ÄΩ·Ä≤: ${_convertToMyanmarNumerals(gregorianDate.day)}/${_convertToMyanmarNumerals(gregorianDate.month)}/${_convertToMyanmarNumerals(gregorianDate.year)}',
            ),
            const SizedBox(height: 8),
            const Text(
              '·Äô·Äæ·Äê·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫: ·Ä§·Äû·Ää·Ä∫ ·ÄÅ·Äî·Ä∑·Ä∫·Äô·Äæ·Äî·Ä∫·Ä∏·Äê·ÄΩ·ÄÄ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äæ·ÄØ ·Äñ·Äº·ÄÖ·Ä∫·Äû·Ää·Ä∫·Åã ·Äê·Ä≠·ÄÄ·Äª·Äû·Ä±·Ä¨ ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äô·Äæ·ÄØ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äê·Ä≠·ÄÄ·Äª·Äû·Ä±·Ä¨ ·Äî·ÄÄ·Äπ·ÄÅ·Äê·Äπ·Äê·Äõ·Ä¨·Äá·Ä∫ ·Äê·ÄΩ·ÄÄ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏ ·Äú·Ä≠·ÄØ·Ä°·Äï·Ä∫·Äû·Ää·Ä∫·Åã',
              style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic),
            ),
          ],
        ),
        actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('OK'))],
      ),
    );
  }

  // Myanmar translation helper methods
  String _getMyanmarTithiName(String tithiName) {
    const Map<String, String> tithiTranslations = {
      'Pratipada': '·Äï·Äë·Äô',
      'Dwitiya': '·Äí·ÄΩ·Ä≠·Äê·Ä≠·Äö·Ä¨',
      'Tritiya': '·Äê·Äº·Ä≠·Äê·Ä≠·Äö·Ä¨',
      'Chaturthi': '·ÄÖ·Äê·ÄØ·Äê·Äπ·Äê·ÄÆ',
      'Panchami': '·Äï·Ä•·Äπ·ÄÖ·Äô·ÄÆ',
      'Shashthi': '·ÄÜ·Äã·Äπ·Äå·Äô·ÄÆ',
      'Saptami': '·Äû·Äê·Äπ·Äê·Äô·ÄÆ',
      'Ashtami': '·Ä°·Äã·Äπ·Äå·Äô·ÄÆ',
      'Navami': '·Äî·Äù·Äô·ÄÆ',
      'Dashami': '·Äí·Äø·Äô·ÄÆ',
      'Ekadashi': '·Äß·ÄÄ·Äø·ÄÆ',
      'Dwadashi': '·Äí·ÄΩ·Ä´·Äí·Äø·ÄÆ',
      'Trayodashi': '·Äê·Äº·Äõ·Ä≠·ÄØ·Äí·Äø·ÄÆ',
      'Chaturdashi': '·ÄÖ·Äê·ÄØ·Äí·Äπ·Äí·Äø·ÄÆ',
      'Purnima': '·Äï·ÄØ·Äè·Äπ·Äè·Äô·ÄÆ (·Äú·Äï·Äº·Ää·Ä∑·Ä∫)',
      'Amavasya': '·Ä°·Äô·Ä¨·Äù·Äû·ÄÆ (·Äú·ÄÄ·ÄΩ·Äö·Ä∫)',
    };
    return tithiTranslations[tithiName] ?? tithiName;
  }

  String _getMyanmarPaksha(String paksha) {
    const Map<String, String> pakshaTranslations = {'Shukla': '·Äû·ÄØ·ÄÄ·Äú·Äï·ÄÄ·Äπ·ÄÅ', 'Krishna': '·ÄÄ·Äè·Äæ·Äï·ÄÄ·Äπ·ÄÅ'};
    return pakshaTranslations[paksha] ?? paksha;
  }

  String _getMyanmarVara(String vara) {
    const Map<String, String> varaTranslations = {
      // Sanskrit/Hindi names
      'Ravivar': '·Äê·Äî·ÄÑ·Ä∫·Äπ·ÄÇ·Äî·ÄΩ·Ä±·Äî·Ä±·Ä∑',
      'Somvar': '·Äê·Äî·ÄÑ·Ä∫·Äπ·Äú·Ä¨·Äî·Ä±·Ä∑',
      'Mangalvar': '·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·Ä´·Äî·Ä±·Ä∑',
      'Budhvar': '·Äó·ÄØ·Äí·Äπ·Äì·Äü·Ä∞·Ä∏·Äî·Ä±·Ä∑',
      'Guravar': '·ÄÄ·Äº·Ä¨·Äû·Äï·Äê·Ä±·Ä∏·Äî·Ä±·Ä∑',
      'Shukravar': '·Äû·Ä±·Ä¨·ÄÄ·Äº·Ä¨·Äî·Ä±·Ä∑',
      'Shanivar': '·ÄÖ·Äî·Ä±·Äî·Ä±·Ä∑',

      // English names (from getWeekdayName function)
      'Sunday': '·Äê·Äî·ÄÑ·Ä∫·Äπ·ÄÇ·Äî·ÄΩ·Ä±·Äî·Ä±·Ä∑',
      'Monday': '·Äê·Äî·ÄÑ·Ä∫·Äπ·Äú·Ä¨·Äî·Ä±·Ä∑',
      'Tuesday': '·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·Ä´·Äî·Ä±·Ä∑',
      'Wednesday': '·Äó·ÄØ·Äí·Äπ·Äì·Äü·Ä∞·Ä∏·Äî·Ä±·Ä∑',
      'Thursday': '·ÄÄ·Äº·Ä¨·Äû·Äï·Äê·Ä±·Ä∏·Äî·Ä±·Ä∑',
      'Friday': '·Äû·Ä±·Ä¨·ÄÄ·Äº·Ä¨·Äî·Ä±·Ä∑',
      'Saturday': '·ÄÖ·Äî·Ä±·Äî·Ä±·Ä∑',
    };
    return varaTranslations[vara] ?? vara;
  }

  String _getMyanmarNakshatra(String nakshatra) {
    const Map<String, String> nakshatraTranslations = {
      'Ashwini': '·Ä°·Äø·Äù·Äè·ÄÆ',
      'Bharani': '·Äò·Äõ·Äè·ÄÆ',
      'Krittika': '·ÄÄ·Äº·Äê·Äπ·Äê·Ä≠·ÄÄ·Ä¨',
      'Rohini': '·Äõ·Ä±·Ä¨·Äü·Äè·ÄÆ',
      'Mrigashirsha': '·Äô·Ä≠·ÄÇ·Äû·ÄÆ',
      'Ardra': '·Ä°·Äí·Äº',
      'Punarvasu': '·Äï·ÄØ·Äè·Äπ·Äè·Äñ·ÄØ·Äû·Äª·Äæ',
      'Pushya': '·Äñ·ÄØ·Äû·Äª·Äæ',
      'Ashlesha': '·Ä°·Äû·Äú·Ä≠·Äø',
      'Magha': '·Äô·Ä¨·ÄÉ',
      'Purva Phalguni': '·Äï·Äº·ÄØ·Äó·Äπ·Äó·Ä¨ ·Äò·Äõ·ÄÇ·ÄØ·Äè·Äπ·Äè·ÄÆ',
      'Uttara Phalguni': '·Ä•·Äê·Äπ·Äê·Äõ·Ä¨·Äò·Äõ·ÄÇ·ÄØ·Äè·Äπ·Äè·ÄÆ',
      'Hasta': '·Äü·Äø·Äí',
      'Chitra': '·ÄÖ·Ä≠·Äê·Äº',
      'Swati': '·Äû·ÄΩ·Ä¨·Äê·Ä≠',
      'Vishakha': '·Äù·Ä≠·Äû·Ä¨·ÄÅ·Ä´',
      'Anuradha': '·Ä°·Äî·ÄØ·Äõ·Ä¨·Äì',
      'Jyeshtha': '·Äá·Ä±·Äã·Äπ·Äå',
      'Mula': '·Äô·Ä∞·Äú',
      'Purva Ashadha': '·Äï·Äº·ÄØ·Äó·Äπ·Äó·Ä´·Äû·Ä†·Ä∫',
      'Uttara Ashadha': '·Ä•·Äê·Äπ·Äê·Äõ·Ä¨·Äû·Ä†·Ä∫',
      'Shravana': '·Äû·Äõ·Äù·Äè·Ä∫',
      'Dhanishtha': '·Äì·Äî·Äû·Ä≠·Äí·Äπ·Äì',
      'Shatabhisha': '·Äû·Äê·Äπ·Äê·Äò·Ä≠·Äû·Äª·Äæ',
      'Purva Bhadrapada': '·Äï·Äº·ÄØ·Äó·Äπ·Äó·Ä¨ ·Äï·ÄØ·Äõ·Äï·Ä≠·ÄØ·ÄÄ·Ä∫',
      'Uttara Bhadrapada': '·Ä•·Äê·Äπ·Äê·Äõ·Ä¨ ·Äï·ÄØ·Äõ·Äï·Ä≠·ÄØ·ÄÄ·Ä∫',
      'Revati': '·Äõ·Ä±·Äù·Äê·ÄÆ',
    };
    return nakshatraTranslations[nakshatra] ?? nakshatra;
  }

  String _getMyanmarYoga(String yoga) {
    const Map<String, String> yogaTranslations = {
      'Vishkambha': '·Äù·ÄÆ·Äû·ÄÄ·Äô·Äπ·Äò',
      'Priti': '·Äï·ÄÆ·Äê·Ä≠',
      'Ayushman': '·Ä°·Ä¨·Äö·ÄØ·Äû·Äπ·Äô·Ä¨·Äî·Ä∫',
      'Saubhagya': '·Äû·Ä±·Ä¨·Äò·Äá',
      'Shobhana': '·Äû·Ä±·Ä¨·Äò·Äè',
      'Atiganda': '·Ä°·Äê·Ä≠·ÄÇ·Äè·Äπ·Äç',
      'Sukarma': '·Äû·ÄØ·ÄÄ·Äô·Äπ·Äô',
      'Dhriti': '·Äì·ÄÆ·Äê·Ä≠',
      'Shula': '·Äû·Ä∞·Äú',
      'Ganda': '·ÄÄ·Äè·Äπ·Äç',
      'Vriddhi': '·Äù·ÄØ·Äí·Äπ·Äì·Ä≠',
      'Dhruva': '·Äì·Ä∞·Äù',
      'Vyaghata': '·Äó·Äª·Ä¨·ÄÉ·Äê',
      'Harshana': '·Äü·Äû·Äè',
      'Vajra': '·Äù·Äá·ÄÆ·Äõ',
      'Siddhi': '·Äû·Ä≠·Äí·Äπ·Äì·Ä≠',
      'Vyatipata': '·Äó·Äª·Äê·Ä≠·Äï·Ä´·Äê',
      'Variyana': '·Äù·ÄÆ·Äõ·Ä≠·Äö',
      'Parigha': '·Äï·Äõ·ÄÆ·ÄÉ',
      'Shiva': '·Äû·ÄÆ·Äù',
      'Siddha': '·Äû·Ä≠·Äí·Äπ·Äì',
      'Sadhya': '·Äû·Ä¨·Äì·Äª',
      'Shubha': '·Äû·ÄØ·Äò',
      'Shukla': '·Äû·ÄØ·Äê·Äπ·Äê',
      'Brahma': '·Äó·Äº·Äü·Äπ·Äô',
      'Indra': '·Ä£·Äî·Äπ·Äí',
      'Vaidhriti': '·Äù·Ä±·Äì·Äõ·Ä≠',
    };
    return yogaTranslations[yoga] ?? yoga;
  }

  String _getMyanmarKarana(String karana) {
    const Map<String, String> karanaTranslations = {
      'Bava': '·Äó·Äó',
      'Balava': '·Äó·Äú·Äù',
      'Kaulava': '·ÄÄ·Ä±·Ä¨·Äú·Äù·Ä´',
      'Taitila': '·Äê·Ä±·Äë·Ä≠·Äú',
      'Gara': '·ÄÇ·Äõ·Äá·Ä∂',
      'Vanija': '·Äù·Äè·Ä≠·Äá',
      'Vishti': '·Äó·Ä≠·Äã·Äπ·Äå·Ä≠',
      'Shakuni': '·Äû·ÄÄ·ÄØ·Äî·Ä≠',
      'Chatushpada': '·ÄÖ·Äê·ÄØ·Äï·Ä´·Äí',
      'Naga': '·Äî·Ä¨·ÄÇ',
      'Kimstughna': '·ÄÄ·Ä≠·Äê·ÄØ·ÄÉ·Äî',
    };
    return karanaTranslations[karana] ?? karana;
  }

  String _getMyanmarMonth(String month) {
    const Map<String, String> monthTranslations = {
      'Chaitra': '·ÄÖ·Ä≠·Äê·Äº (·Äô·Äê·Ä∫-·Äß·Äï·Äº·ÄÆ)',
      'Vaisakha': '·Äù·Ä≠·Äû·Ä¨·ÄÅ (·Äß·Äï·Äº·ÄÆ-·Äô·Ä±)',
      'Jyaistha': '·Äá·Ä±·Äã·Äπ·Äå (·Äô·Ä±-·Äá·ÄΩ·Äî·Ä∫)',
      'Ashadha': '·Ä°·Ä¨·Äû·Ä†·Äæ (·Äá·ÄΩ·Äî·Ä∫-·Äá·Ä∞·Äú·Ä≠·ÄØ·ÄÑ·Ä∫)',
      'Shravana': '·Äû·Äõ·Äù·Äè·Ä∫(·Äá·Ä∞·Äú·Ä≠·ÄØ·ÄÑ·Ä∫-·Äû·Äº·ÄÇ·ÄØ·Äê·Ä∫)',
      'Bhadrapada': '·Äò·Äí·Äº (·Äû·Äº·ÄÇ·ÄØ·Äê·Ä∫-·ÄÖ·ÄÄ·Ä∫·Äê·ÄÑ·Ä∫·Äò·Ä¨)',
      'Ashvina': '·Ä°·Äø·Äù·Äè·ÄÆ (·ÄÖ·ÄÄ·Ä∫·Äê·ÄÑ·Ä∫·Äò·Ä¨-·Ä°·Ä±·Ä¨·ÄÄ·Ä∫·Äê·Ä≠·ÄØ·Äò·Ä¨)',
      'Kartika': '·ÄÄ·Äº·Äê·Äπ·Äê·Ä≠·ÄÄ·Ä¨ (·Ä°·Ä±·Ä¨·ÄÄ·Ä∫·Äê·Ä≠·ÄØ·Äò·Ä¨-·Äî·Ä≠·ÄØ·Äù·ÄÑ·Ä∫·Äò·Ä¨)',
      'Agrahayana': '·Ä°·Äí·Äº (·Äî·Ä≠·ÄØ·Äù·ÄÑ·Ä∫·Äò·Ä¨-·Äí·ÄÆ·Äá·ÄÑ·Ä∫·Äò·Ä¨)',
      'Pausha': '·Äñ·ÄØ·Äû·Äª·Äæ (·Äí·ÄÆ·Äá·ÄÑ·Ä∫·Äò·Ä¨-·Äá·Äî·Ä∫·Äî·Äù·Ä´·Äõ·ÄÆ)',
      'Magha': '·Äô·Ä¨·ÄÉ (·Äá·Äî·Ä∫·Äî·Äù·Ä´·Äõ·ÄÆ-·Äñ·Ä±·Äñ·Ä±·Ä¨·Ä∫·Äù·Ä´·Äõ·ÄÆ)',
      'Phalguna': '·Äò·Äõ·ÄÇ·ÄØ·Äè·Äπ·Äè·ÄÆ (·Äñ·Ä±·Äñ·Ä±·Ä¨·Ä∫·Äù·Ä´·Äõ·ÄÆ-·Äô·Äê·Ä∫)',
    };
    return monthTranslations[month] ?? month;
  }

  String _getMyanmarSeason(String season) {
    const Map<String, String> seasonTranslations = {
      'Vasanta': '·Äù·Äû·Äî·Äπ·Äê (·Äî·ÄΩ·Ä±·Ä¶·Ä∏·Äõ·Ä¨·Äû·ÄÆ)',
      'Grishma': '·ÄÇ·Ä≠·Äô·Äæ·Äî·Äõ·Äê·ÄØ(·Äî·ÄΩ·Ä±·Äõ·Ä¨·Äû·ÄÆ)',
      'Varsha': '·Äù·Äø·Ä¨·Äî·Äõ·Äê·ÄØ (·Äô·Ä≠·ÄØ·Ä∏·Äõ·Ä¨·Äû·ÄÆ)',
      'Sharad': '·Äû·Äõ·Äí·Äõ·Äê·ÄØ (·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Ä¶·Ä∏·Äõ·Ä¨·Äû·ÄÆ)',
      'Shishira': '·Äû·Ä≠·Äû·Ä≠·Äõ (·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Ä¨·Äû·ÄÆ)',
      'Hemanta': '·Äü·Ä±·Äô·Äî·Äπ·Äê(·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äî·Äæ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Ä¨·Äû·ÄÆ)',
    };
    return seasonTranslations[season] ?? season;
  }

  String _getMyanmarSamvatsara(int hinduYear) {
    // 60-year Samvatsara cycle names in Myanmar
    const List<String> samvatsaraNames = [
      '·Äï·Äº·Äó (Prabha)', // 1. Prabhava
      '·Äù·Ä≠·Äò·Äù (Vibhava)', // 2. Vibhava
      '·Äû·ÄØ·ÄÄ·Äú (Shukla)', // 3. Shukla
      '·Äï·Äº·Äô·Ä±·Ä¨·Äí·ÄØ·Äê (Pramoduta)', // 4. Pramoduta
      '·Äï·Äº·Äá·Ä¨·Äï·Äê·Ä≠ (Prajapati)', // 5. Prajapati
      '·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·ÄÆ·Äõ·Äû (Angirasa)', // 6. Angirasa
      '·Äû·Äº·ÄÆ·Äô·ÄØ·ÄÅ (Shrimukha)', // 7. Shrimukha
      '·Äò·Äù (Bhava)', // 8. Bhava
      '·Äö·ÄØ·Äù (Yuva)', // 9. Yuva
      '·Äì·Ä´·Äê (Dhata)', // 10. Dhata
      '·Ä§·Äõ·Äæ·ÄΩ (Ishvara)', // 11. Ishvara
      '·Äó·Ä¨·Äü·ÄØ·Äì·Ä´·Äî·Äª (Bahudhanya)', // 12. Bahudhanya
      '·Äï·Äº·Äô·Ä¨·Äë·ÄÆ (Pramathi)', // 13. Pramathi
      '·Äù·Ä≠·ÄÄ·Äº·Äô (Vikrama)', // 14. Vikrama
      '·Äù·Åñ·Ä≠·Äõ·Ä∫ (Vrisha)', // 15. Vrisha
      '·ÄÖ·Ä≠·Äê·Äº·Äò·Ä¨·Äî·ÄØ (Chitrabhanu)', // 16. Chitrabhanu
      '·Äû·ÄØ·Äó·Ä´·Äî·ÄØ (Subhanu)', // 17. Subhanu
      '·Äê·Ä¨·Äõ·Äè (Tarana)', // 18. Tarana
      '·Äï·Ä´·Äê·Äπ·Äê·ÄÆ·Äù (Parthiba)', // 19. Parthiba
      '·Äó·Äª·Äö (Vyaya)', // 20. Vyaya
      '·Äû·Äõ·Äπ·Äù·Äá·Ä≠·Äê (Sarvajit)', // 21. Sarvajit
      '·Äû·Äõ·Äπ·Äù·Äì·Ä´·Äõ·ÄÆ (Sarvadhari)', // 22. Sarvadhari
      '·Äù·Ä≠·Äõ·Ä±·Ä¨·Äì·ÄÆ (Virodhi)', // 23. Virodhi
      '·Äù·Ä≠·ÄÄ·Åñ·Äê (Vikrita)', // 24. Vikrita
      '·ÄÅ·Äõ (Khara)', // 25. Khara
      '·Äî·Äî·Äπ·Äí·Äî (Nandana)', // 26. Nandana
      '·Äù·Ä≠·Äá·Äö (Vijaya)', // 27. Vijaya
      '·Äá·Äö (Jaya)', // 28. Jaya
      '·Äô·Äî·Äπ·Äô·Äë (Manmatha)', // 29. Manmatha
      '·Äí·ÄØ·Äô·Äπ·Äô·ÄØ·ÄÅ (Durmukha)', // 30. Durmukha
      '·Äü·Ä±·Äô·Äú·Äô·Äπ·Äó (Hemalamba)', // 31. Hemalamba
      '·Äù·Ä≠·Äú·Äô·Äπ·Äó (Vilamba)', // 32. Vilamba
      '·Äù·Ä≠·ÄÄ·Ä´·Äõ·ÄÆ (Vikari)', // 33. Vikari
      '·Äõ·Äæ·Ä¨·Äõ·Äπ·Äù·Äõ·ÄÆ (Sharvari)', // 34. Sharvari
      '·Äï·Äú·Äù (Plava)', // 35. Plava
      '·Äû·ÄØ·Äò·ÄÄ·Åñ·Äê (Shubhakrit)', // 36. Shubhakrit
      '·Äû·Ä±·Ä¨·Äò·ÄÄ·Åñ·Äê (Sobhakrit)', // 37. Sobhakrit
      '·ÄÄ·Äº·Ä±·Ä¨·Äì·ÄÆ (Krodhi)', // 38. Krodhi
      '·Äù·Ä≠·Äõ·ÄΩ·Ä¨·ÄÄ·Äπ·ÄÅ (Vishvavasu)', // 39. Vishvavasu
      '·Äï·Äõ·Ä¨·Äò·Äù (Parabhava)', // 40. Parabhava
      '·Äï·Äú·Äù·ÄÑ·Ä∫·Äπ·ÄÇ (Plavanga)', // 41. Plavanga
      '·ÄÄ·ÄÆ·Äú·ÄÄ (Kilaka)', // 42. Kilaka
      '·Äû·Ä±·Ä¨·Äô·Äª (Saumya)', // 43. Saumya
      '·Äû·Ä¨·Äì·Ä´·Äõ·Äè (Sadharana)', // 44. Sadharana
      '·Äù·Ä≠·Äõ·Ä±·Ä¨·Äì·ÄÄ·Åñ·Äê (Virodhakrit)', // 45. Virodhakrit
      '·Äï·Äõ·ÄÆ·Äì·Ä´·Äù·ÄÆ (Paridhavi)', // 46. Paridhavi
      '·Äï·Äº·Äô·Ä¨·Äí·ÄÆ·ÄÖ (Pramadica)', // 47. Pramadica
      '·Ä°·Ä¨·Äî·Äî·Äπ·Äí (Ananda)', // 48. Ananda
      '·Äõ·Ä¨·ÄÄ·Äπ·ÄÅ·Äû (Rakshasa)', // 49. Rakshasa
      '·Äî·Äú (Nala)', // 50. Nala (Anala)
      '·Äï·Ä≠·ÄÑ·Ä∫·Äπ·ÄÇ·Äú (Pingala)', // 51. Pingala
      '·ÄÄ·Ä¨·Äú·Äö·ÄØ·ÄÄ·Äπ·Äê (Kalayukta)', // 52. Kalayukta
      '·Äû·Ä≠·Äí·Äπ·Äì·Ä´·Äê·Äπ·Äê (Siddharthi)', // 53. Siddharthi
      '·Äõ·Ä±·Ä¨·Äí·Äº·ÄÆ (Raudri)', // 54. Raudri
      '·Äí·ÄØ·Äô·Äπ·Äô·Äê·Ä≠ (Durmati)', // 55. Durmati
      '·Äí·ÄØ·Äî·Äπ·Äí·ÄØ·Äó·ÄÆ (Dundubhi)', // 56. Dundubhi
      '·Äõ·ÄØ·Äì·Ä≠·Äõ·Ä±·Ä¨·Äí·Äπ·ÄÇ·Ä´·Äõ·ÄÆ (Rudhirodgari)', // 57. Rudhirodgari
      '·Äõ·ÄÄ·Äπ·Äê·Ä¨·ÄÄ·Äπ·ÄÅ (Raktakshi)', // 58. Raktakshi
      '·ÄÄ·Äº·Ä±·Ä¨·Äì·Äî (Krodhana)', // 59. Krodhana
      '·ÄÄ·Äπ·ÄÅ·Äö (Akshaya)', // 60. Akshaya
    ];

    // Calculate the position in the 60-year cycle
    // Hindu calendar started from 3102 BCE (Kali Yuga)
    int cyclePosition = (hinduYear - 1) % 60;
    return samvatsaraNames[cyclePosition];
  }

  String _convertToMyanmarNumerals(int number) {
    const List<String> myanmarDigits = ['·ÅÄ', '·ÅÅ', '·ÅÇ', '·ÅÉ', '·ÅÑ', '·ÅÖ', '·ÅÜ', '·Åá', '·Åà', '·Åâ'];
    return number.toString().split('').map((digit) {
      int digitInt = int.tryParse(digit) ?? 0;
      return myanmarDigits[digitInt];
    }).join();
  }

  String _getMyanmarDayMuhurta(String muhurtaName) {
    const Map<String, String> dayMuhurtaTranslations = {
      'Rudra': '·Äõ·ÄØ·Äí·Äº',
      'Ahi': '·Äû·Äï·Äπ·Äï',
      'Mitra': '·Äô·Ä≠·Äê·Äº',
      'Vasu': '·Äù·Ä≠·ÄÄ·Äõ',
      'Vara': '·Äù·Äû·ÄØ',
      'Vishwadeva': '·Ä•·Äí·ÄÄ',
      'Abhijit': '·Äù·Ä≠·Äø·Ä±·Ä¨·Äí·Ä±·Äù·Ä´',
      'Brahma': '·Ä°·Äò·Ä≠·Äá·Ä≠·Äê·Ä∫',
      'Kunda': '·Äó·Äº·Äü·Äπ·Äô·Ä¨',
      'Indragni': '·ÄÄ·ÄØ·Äî·Ä∫·Äí·Äº',
      'Rakshasa': '·Ä£·Äî·Äπ·Äí·Ä¨·ÄÇ·Äπ·Äî·Ä≠',
      'Varuna': '·Äõ·ÄÄ·Äπ·ÄÅ·Äû',
      'Aryama': '·Äù·Äõ·ÄØ·Äè',
      'Bhaga': '·Ä°·Äö·Äª·Äô·Ä¨',
      'Girish': '·Äò·ÄÇ',
    };
    return dayMuhurtaTranslations[muhurtaName] ?? muhurtaName;
  }

  String _getMyanmarNightMuhurta(String muhurtaName) {
    const Map<String, String> nightMuhurtaTranslations = {
      'Shiva': '·Äû·Ä≠·Äù',
      'Ajapada': '·Ä°·Äá·Äï·Ä´·ÄÄ·Ä∫',
      'Ativunika': '·Ä°·Äê·Ä≠·Äó·ÄØ·Äî·Ä≠·Äö',
      'Pushya': '·Äï·ÄØ·Äû·Äª·Äæ·Äö',
      'Ashvinikumara': '·Ä°·Äø·Ä≠·Äî·Ä≠·ÄÄ·ÄØ·Äô·Ä¨·Äõ',
      'Dharmaraja': '·Äì·Äô·Äπ·Äô·Äõ·Ä¨·Äá',
      'Agni': '·Ä°·ÄÇ·Äπ·ÄÇ·Ä≠',
      'Brahma': '·Äó·Äº·Äü·Äπ·Äô·Ä¨',
      'Chandrima': '·ÄÖ·Äî·Äπ·Äì·Ä≠·Äô·Ä¨',
      'Aditi': '·Ä°·Äí·Ä≠·Äê·Ä≠',
      'Brihaspati': '·Äó·Äº·Ä≠·Äü·Äï·Äπ·Äï·Äê·Ä≠',
      'Vishnu': '·Äó·Ä≠·Äø·Äè·Ä≠·ÄØ·Ä∏',
      'Surya': '·Äû·Ä∞·Äõ·Ä≠·Äö',
      'Twashta': '·Äê·ÄΩ·Äã·Äπ·Äå·Ä¨',
      'Vayu': '·Äù·Ä´·Äö·ÄØ',
    };
    return nightMuhurtaTranslations[muhurtaName] ?? muhurtaName;
  }

  String _getMyanmarMuhurta(String muhurtaName, bool isDay) {
    return isDay ? _getMyanmarDayMuhurta(muhurtaName) : _getMyanmarNightMuhurta(muhurtaName);
  }
}
